name: "Perform Release on Checkbox Tick"

on:
  issue_comment:
    types: edited

jobs:
  listen-for-release-comment:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: write
    if: contains('github-actions[bot]', github.event.comment.user.login)
    steps:
      - uses: actions/github-script@v7
        with:
          script: |
            const comment = context.payload.comment.body;
            const checkboxPattern = /(- \[x\] \*\*Check this box to perform the release\.\*\*)/;

            // Ensure the comment contains a checked box
            if (!checkboxPattern.test(comment)) {
              throw new Error("Checkbox for release not ticked. Aborting!");
            }

            console.log("Checkbox ticked, proceeding with release...");

      - name: Checkout repository
        uses: actions/checkout@v4 # This checks out the repository

      - name: Authenticate to gh cli
        run: gh auth login --with-token <<< ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Perform release
        run: |
          echo "Release initiated!"
          gh pr merge ${{ github.event.issue.number }} --squash

      - name: Untick comment
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const issueNumber = context.issue.number;
            const commentId = context.payload.comment.id;
            const originalComment = context.payload.comment.body;

            // Replace [x] with [ ]
            const updatedComment = originalComment.replace('- [x]', '- [ ]');

            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: commentId,
              body: updatedComment
            });

      - name: Update comment with success message
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            const issueNumber = context.issue.number;
            const commentId = context.payload.comment.id;
            const originalComment = context.payload.comment.body;

            // Create the success message
            const successMessage = `ðŸŽ‰ **Hooray!** The release has been successfully deployed! ðŸš€\n\nThank you for your contribution! If you need anything else, feel free to ask.`;

            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: commentId,
              body: successMessage
            });
